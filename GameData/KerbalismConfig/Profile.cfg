KERBALISM_PROFILE
{
  // You can define a HVL (Half Value Layer) value in meters for specific resources.
  // - lowHVL is the thickness of that material required to block half of incoming 1 MeV gamma radiation.
  //   Will be used for local sources (rtg, nuclear reactor...) and for "ambiant" radiation (planets, belts...)
  // - highHVL is the thickness of that material required to block half of incoming 25 MeV gamma radiation.
  //   That value will be used for solar storm radiation
  // Note that the resource amount is scaled by the part volume to determine the resource thickness on each part.
  // ksmShielding values are based on some literature about PET polymers (density 1.38) considered for IRL radiation shielding.
  RESOURCE_HVL
  {
    name = ksmShielding
    isWallResource = true
    lowHVL = 0.06
    highHVL = 0.15
  }

  SUPPLY
  {
    name = ElectricCharge
    evaCapacity = 33.0
    grantedOnRescue = 10000.0
    warnOnlyIfManned = false
    lowMessage = #KERBALISM_low_battery
    lowStopWarp = true
    emptyMessage = #KERBALISM_empty_battery
    emptyStopWarp = true
    fillMessage = #KERBALISM_refill_battery
  }

  SUPPLY
  {
    name = KsmAtmosphere
  }

  SUPPLY
  {
    name = KsmWasteAtmosphere
    levelThreshold = 0.001
    warningUIMode = OnFull
    fillMessage = Habitat CO2 levels are rising on $VESSEL
    fillSeverity = danger
  }

  SUPPLY
  {
    name = Food
    grantedOnRescue = 2.2  // 8 days
    lowMessage = #KERBALISM_low_food
    emptyMessage = #KERBALISM_empty_food
    emptyStopWarp = true
    fillMessage = #KERBALISM_refill_food
  }

  SUPPLY
  {
    name = Water
    grantedOnRescue = 1.1  // 8 days
    lowMessage = #KERBALISM_low_water
    emptyMessage = #KERBALISM_empty_water
    emptyStopWarp = true
    fillMessage = #KERBALISM_refill_water
  }

  SUPPLY
  {
    name = Oxygen
    evaCapacity = 12.5     // 2 hrs
    grantedOnRescue = 298   // 8 days
    lowStopWarp = true
    lowMessage = #KERBALISM_low_oxygen
    emptyMessage = #KERBALISM_empty_oxygen
    emptyStopWarp = true
    fillMessage = #KERBALISM_refill_oxygen
  }

  SUPPLY
  {
    name = CarbonDioxide
    warningMode = Disabled
    lowMessage = #KERBALISM_low_co2
    emptyMessage = #KERBALISM_empty_co2
    fillMessage = #KERBALISM_refill_co2
  }

  SUPPLY
  {
    name = Nitrogen
    warningMode = Disabled
    on_rescue = 100.0
    lowMessage = #KERBALISM_low_nitrogen
    emptyMessage = #KERBALISM_empty_nitrogen
    fillMessage = #KERBALISM_refill_nitrogen
  }

  SUPPLY
  {
    name = Hydrogen
    warningMode = Disabled
    lowMessage = #KERBALISM_low_hydrogen
    emptyMessage = #KERBALISM_empty_hydrogen
    fillMessage = #KERBALISM_refill_hydrogen
  }

  SUPPLY
  {
    name = Ammonia
    warningMode = Disabled
    lowMessage = #KERBALISM_low_ammonia
    emptyMessage = #KERBALISM_empty_ammonia
    fillMessage = #KERBALISM_refill_ammonia
  }
  
  COMFORT
  {
    name = notAlone
    title = Not alone
    maxBonus = 0.25
  }
  
  COMFORT
  {
    name = callHome
    title = Call home
    maxBonus = 0.15
  }
  
  COMFORT
  {
    name = firmGround
    title = Firm ground
    maxBonus = 0.3
  }
  
  COMFORT
  {
    name = exercise
    title = Exercise
    maxBonus = 0.1
  }
  
  COMFORT
  {
    name = panorama
    title = Panorama
    maxBonus = 0.15
  }
  
  COMFORT
  {
    name = messRoom
    title = Mess room
    maxBonus = 0.25
  }
  
  COMFORT
  {
    name = plants
    title = Plants
    maxBonus = 0.1
  }

// ============================================================================
// RULE : HEALTH
// ============================================================================

  RULE
  {
    name = health
    title = Health issues
    description = Increase due to hunger, thirst, inadequate temperature, lack of oxygen, co2 poisoning and high level radiation.\nRecover slowly when everything is fine.
    maxValue = 1.0
    resetOnRecovery = true
    icon = KerbalismConfig/Textures/icons8-health-48
    
    EFFECT
    {
      name = fatality
      title = death
    }
    
    MODIFIER
    {
      name = hunger
      title = Hunger
      useDurationMultiplier = true
      baseRateDuration = 15d
      // baseRate = 0.000003086
      rateModifier = 1.0 - ResHandler.GetResource("Food").AvailabilityFactor
    }
    
    MODIFIER
    {
      name = thirst
      title = Thirst
      useDurationMultiplier = true
      baseRateDuration = 3d
      // baseRate = 0.000015432
      rateModifier = 1.0 - ResHandler.GetResource("Water").AvailabilityFactor
    }
    
    MODIFIER
    {
      name = oxygen
      title = Oxygen deprivation
      useDurationMultiplier = false
      baseRateDuration = 3m
      // baseRate = 0.005555556
      rateModifier = 1.0 - ResHandler.GetResource("Oxygen").AvailabilityFactor
    }
    
    MODIFIER
    {
      name = temperature
      title = Temperature
      useDurationMultiplier = false
      baseRate = 0.0000007 // 2h at 100k temp diff in 20mÂ² -> 1 / (60 * 60 * 2 * 100 * 20)
      rateModifier = EnvTempDiff * Habitat.livingVolume * (1.0 - ResHandler.ElectricCharge.AvailabilityFactor)
    }
    
    MODIFIER
    {
      name = co2Poisoning
      title = CO2 poisoning
      useDurationMultiplier = false
      baseRateDuration = 30m // 30 minutes at 2% CO2 concentration
      // baseRate = 0.000555556 
      rateModifier = if(Habitat.poisoningLevel > 0.02, Habitat.poisoningLevel * 50.0, 0.0)
    }
    
    MODIFIER
    {
      name = radiationPoisoning
      title = Radiation poisoning
      // Acute radiation syndrome
      // Balance assumption : effect start at ~0.1 rad/h (~2.7778e-5 rad/s)
      // Some data points provided here : https://en.wikipedia.org/wiki/Acute_radiation_syndrome
      // | dose (Gy) | dose (rad) | rad/h for 24h | rad/s for 24h | death % | death ETA (24h days) | death ETA (s) | degen rate  |
      // |-----------|------------|---------------|---------------|---------|----------------------|---------------|-------------|
      // | 0,5       | 50         | 2,1           | 5,7870E-04    | 0,025   | 49                   | 4233600       | 2,36206E-07 |
      // | 4         | 400        | 16,7          | 4,6296E-03    | 0,25    | 35                   | 3024000       | 3,30688E-07 |
      // | 7         | 700        | 29,2          | 8,1019E-03    | 0,75    | 21                   | 1814400       | 5,51146E-07 |
      // | 15        | 1500       | 62,5          | 1,7361E-02    | 1       | 7                    | 604800        | 1,65344E-06 |
      // | 30        | 3000       | 125,0         | 3,4722E-02    | 1       | 1                    | 86400         | 1,15741E-05 |
      // With a bit of curve fitting, could look like this : https://www.desmos.com/calculator/owec1toxuq
      // But this is probably overkill and discutable anyway :
      // rateModifier = Max(0.0, if(Habitat.radiationRate < 0.0062, 0.5e-6 + (-0.5204e-6 / (1 + Pow(Habitat.radiationRate / 4e-4, 1.2))), 0.9736e-6 - (1.6e-4 * Habitat.radiationRate) + (1.3e-2 * Pow(Habitat.radiationRate, 2.0))))
      // So let's keep it simple :
      rateModifier = Max(0.0, -9.68435e-9 + 3.48636e-4 * Habitat.radiationRate)
    }
    
    MODIFIER
    {
      name = healing
      title = Healing
      baseRate = -1.0
      useDurationMultiplier = true
      baseRateDuration = 30d // 30 days for full recovery
      // baseRate = -1.54321e-6
      // healing happen only when no negative health modifiers are happening
      rateModifier = if(ResHandler.GetResource("Food").AvailabilityFactor = 1.0 AND ResHandler.GetResource("Food").AvailabilityFactor = 1.0 AND ResHandler.GetResource("Food").AvailabilityFactor = 1.0 AND Habitat.poisoningLevel < 0.02 AND Habitat.radiationRate < 2.7778e-5, 1.0, 0.0)
    }
  }
  
  PROCESS
  {
    name = eating
    title = #KERBALISM_RuleName_eating
    modifier = RulesEnabledCrewCount
    massConservation = true
    
    INPUT
    {
      // Based on ISS figures of dehydrated food of 0.59Kg/meal 3 times/day = 1.77Kg/day.
      // Kerbals use 1/16 of an astronauts use and have 2 meals/day giving figures of 0.036875Kg/meal = 0.07375Kg/day
      name = Food
      rate = 0.00001215
    }
    OUTPUT
    {
      name = Waste
      dumpByDefault = true
    }
  }
  
  PROCESS
  {
    name = drinking
    title = #KERBALISM_RuleName_drinking
    modifier = RulesEnabledCrewCount
    massConservation = true
    
    INPUT
    {
      // Based on ISS figures of 1.62Kg/day drinking and 0.8Kg/day to rehydrate food 3 times/day = 2.42 Kg/day.
      // Kerbals use 1/16 of an astronauts use and have 2 meals/day giving figures of 0.10125Kg/day drinking
      // and 0.033125Kg/day to rehydrate food 2 times/day = 0.134375Kg/day.
      name = Water
      rate = 0.00000622
    }
    OUTPUT
    {
      name = WasteWater
      dumpByDefault = true
    }
  }

  PROCESS
  {
    name = breathing
    title = Breathing
    modifier = RulesEnabledCrewCount
    massConservation = true
    
    INPUT
    {
      // Based on ISS figures of 0.84Kg/day. Kerbals use 1/16 of an astronauts use giving figures of 0.0525Kg/day.
      name = Oxygen
      rate = 0.001713537562385
    }
    OUTPUT
    {
      name = KsmWasteAtmosphere
      dumpByDefault = true
    }
  }
  
  PROCESS
  {
    name = climatization
    title = Climatization
    modifier = EnvTempDiff * Habitat.livingVolume
    
    INPUT
    {
      name = ElectricCharge
      rate = 0.0001 // per-kelvin (temp diff), per m^3 (living space), per-second
    }
  }

// ============================================================================
// RULE : FITNESS
// ============================================================================

  RULE
  {
    name = fitness
    title = Low gravity effects
    description = Health degradation caused by extended stays in low-g and zero-g environments. Add exercise comforts and provide artificial gravity to counter it. 
    maxValue = 1.0
    maxValueVariance = 0.1
    maxValueBadassBonus = 0.1
    maxValueLevelBonus = 0.025
    resetOnRecovery = true
    icon = KerbalismConfig/Textures/icons8-fitness-48

    // See following graph :
    // https://www.desmos.com/calculator/uf2t4kx1eb
    // Note : ~ 10 years in zero-g, with a 0.25g ring + 50% exercise

    MODIFIER
    {
      name = lowGravity
      title = Low gravity
      useDurationMultiplier = true
      baseRateDuration = 2y
      // Min body gravity for perpetual fitness : ~0.7g
      rateModifier = Max(0.0, Min(1.0, Pow(-2.0 * Habitat.gravity + 0.983, 3.0) + 0.05))
    }
    
    MODIFIER
    {
      name = artificialGravity
      title = Artificial gravity
      useDurationMultiplier = true
      baseRateDuration = 2y
      
      // cannot recover, only prevent the rule increase
      // only exercise can recover
      cancelRateMode = true
      
      // increase quickly from 0 to 0.4g, plateau at 85 % reduction when in zero-G
      rateModifier = -Max(0.0, Min(1.0, Pow((1.5 * Habitat.artificialGravity) - 1.0, 3.0) + 0.85))
    }
    
    MODIFIER
    {
      name = exercise
      title = Exercise
      useDurationMultiplier = true
      baseRateDuration = 2y

      // 8 years with 100% exercise comfort
      rateModifier = -0.4 * Habitat.comforts["exercise"].Level
    }
    
    EFFECT
    {
      name = fatality
      title = death
      
      THRESHOLD_CURVE
      {
        key = 0.0 0.7
        key = 1.0 1.0
      }
    }
  }
  
// ============================================================================
// RULE : RADIATION EXPOSURE
// ============================================================================

  RULE
  {
    name = radiationExposure
    title = Radiation exposure
    description = Cumulated radiation exposure will eventually lead to a cancer or another deadly condition.
    maxValue = 1.0
    maxValueVariance = 0.2
    maxValueBadassBonus = 0.05
    resetOnRecovery = false
    icon = KerbalismConfig/Textures/icons8-radiation-48
    
    warningThreshold = 0.45
    dangerThreshold = 0.6
    
    MODIFIER
    {
      name = radiation
      title = Radiation
      // NASA baseline gives 3% probability for a ~70 rad dose absorbed over a year at age 30-40 (page 117 : https://spaceradiation.jsc.nasa.gov/irModels/TP-2013-217375.pdf)
      // This gives a 0.043 % probability per rad
      // Kerbals are strong, let nerf that to 0.01 % (10000 absorbed rads to die from a cancer
      rateModifier = Habitat.radiationRate * 0.0001
    }
    
    EFFECT
    {
      name = fatality
      title = death
      
      THRESHOLD_CURVE
      {
        key = 0.0 0.5
        key = 1.0 1.0
      }
    }
  }
  
// ============================================================================
// RULE : STRESS
// ============================================================================

  RULE
  {
    name = stress
    title = Stress
    description = Stress will cause Kerbals to make mistakes. Maximize comforts and living space to prevent it.
    maxValue = 1.0
    maxValueCourageBonus = 0.1
    maxValueStupidityBonus = -0.1
    maxValueBadassBonus = 0.25
    maxValueLevelBonus = 0.05
    resetOnRecovery = true
    icon = KerbalismConfig/Textures/icons8-stress-48
    
    // https://www.desmos.com/calculator/c0v37hwx1c
    // s1 : stress baseRateDuration
    // l1 : living space baseRateDuration
    // c1 : comfort baseRateDuration
    // l : LivingSpaceFactor
    // c : ComfortBonusFactor
    // t : time (days) to reach 100 % (in days) if positive, time to go from 100 to 0 % if negative
    // s3 : time (days) to reach 100 % (stress modifier only)
    // l3 : time (days) to go from 100 to 0 % (living space modifier only)
    // c3 : time (days) to go from 100 to 0 % (comfort modifier modifier only)
    
    MODIFIER
    {
      name = stress
      title = Living conditions
      useDurationMultiplier = true
      baseRateDuration = 5d
      
      rateModifier = Pow((2.0 - Pow(Habitat.LivingSpaceFactor(20.0), 0.25) - Pow(Habitat.ComfortBonusFactor(), 0.5)) / 2.0, 3.5)
    }
    
    MODIFIER
    {
      name = comfort
      title = Comfort
      useDurationMultiplier = true
      baseRateDuration = 5d
      
      rateModifier = - Pow(0.2 * Habitat.ComfortBonusFactor(), 6.0)
    }
    
    MODIFIER
    {
      name = livingSpace
      title = Living space
      useDurationMultiplier = true
      baseRateDuration = 5d
      
      rateModifier = - Pow(0.4 * Habitat.LivingSpaceFactor(20.0), 6.0)
    }
    
    EFFECT
    {
      name = lostScience
      title = Fat fingers
      cooldown = 10d
      ruleRecovery = 0.2
      ruleRecoveryVariance = 0.1
      
      THRESHOLD_CURVE
      {
        key = 0.0 0.7
        key = 1.0 1.0
      }
    }
    
    EFFECT
    {
      name = lostResource
      title = Wrong valve
      cooldown = 10d
      ruleRecovery = 0.2
      ruleRecoveryVariance = 0.1
      
      THRESHOLD_CURVE
      {
        key = 0.0 0.7
        key = 1.0 1.0
      }
      
      LOST_RESOURCE
      {
        selection = Any
      }
    }
    
    EFFECT
    {
      name = componentFailure
      title = Rage
      cooldown = 10d
      ruleRecovery = 0.2
      ruleRecoveryVariance = 0.1
      
      THRESHOLD_CURVE
      {
        key = 0.0 0.7
        key = 1.0 1.0
      }
    }
  }
  
// ============================================================================
// RULE : HOMESICKNESS
// ============================================================================

  RULE
  {
    name = homesickness
    title = Homesickness
    description = Being far from home is hard, especially when living conditions are poor. Even the most courageous Kerbals will refuse to stay forever in space.
    maxValue = 1.0
    maxValueCourageBonus = 0.2
    maxValueStupidityBonus = -0.2
    maxValueBadassBonus = 0.25
    maxValueLevelBonus = 0.02
    resetOnRecovery = true
    icon = KerbalismConfig/Textures/icons8-homesickness-48
    
    MODIFIER
    {
      name = stress
      title = Stress

      // https://www.desmos.com/calculator/oj56jfhcvi
      // b : baseRateDuration (in days)
      // l : living space factor
      // c : comfort factor
      // t : time to reach 100 % (in years)
      useDurationMultiplier = true
      baseRateDuration = 1y
      rateModifier = Pow((2.0 - Pow(Habitat.LivingSpaceFactor(20.0), 0.25) - Pow(Habitat.ComfortBonusFactor(), 0.5)) / 2.0, 1.75)
    }
    
    EFFECT
    {
      name = inactive
      title = Kerbal on strike
      duration = perpetual
    }
  }

// ============================================================================
// Processes - non controllable
// ============================================================================

// Processes input/output rates are multiplied by the result of the modifier.

// In the modifier formula, you can use a virtual resource called by default "process name" + "Process"
// You can change that name with "pseudoResourceName = X". 
// Note that this name must be unique and different from any regular KSP resource name.
// The default modifier is : ResHandler.GetResource(pseudoResourceName).Amount
// The pseudo resource Capacity is set to the sum of active process controllers capacity
// The pseudo resource Amount is the Capacity scaled by the user utilization setting

// If you set UseCapacityResource = true, a local virtual resource named by default
// "process name" + "Capacity" will added to the part by each process controller.
// You can change that name with "capacityResourceName = X" (must also be unique).
// The inital amount and capacity is set to the process controller capacity.
// Contrary to the process pseudo-resource, that capacity resource can be used
// in the inputs / outputs of a process, as well as in a process modifier. 
// This allow to create self consuming processes, see the RTG and nonRegenerativeScrubber
// for examples.

// By default, the capacity resource won't be visible. This can be changed by providing
// a VIRTUAL_RESOURCE definition of type = PartResource for it in the profile.

  PROCESS
  {
    // From ISS: see https://www.nasa.gov/pdf/179225main_ISS_Poster_Back.pdf and https://ntrs.nasa.gov/archive/nasa/casi.ntrs.nasa.gov/20110012997.pdf
    // 935 mÂ³ volume, ~1105 mÂ² surface (estimated), 0.227 Kg/day (structural)
    // Surface estimation: see the "Atmo Leak Estimation" spreadsheet in misc.
    // 1 Kerbin day is 1/4 of a human day so 0.227/4 = 0.05675 Kg/day
    // 0.05675 Kg/day over 1105 mÂ² = 0.0513352488 (g/mÂ²)/day.
    // Using the density of N2 from CRP we get 1.251 g/KSPunit = 0.0410353707 (unit/mÂ²)/day
    // That divided over 21600 secs = 0.000001899785682 (unit/mÂ²)/sec
    name = atmoLeaks
    title = #KERBALISM_Process_AtmoLeaks_title
    desc = #KERBALISM_Process_AtmoLeaks_desc
    modifier = Habitat.pressurizedSurface * (1.0 - Min(EnvStaticPressure, 1.0))
    canToggle = false
    INPUT
    {
      name = KsmAtmosphere
      rate = 0.000001899785682  // leakage of Atmosphere (N2) per second for a surface area of 1 mÂ²
    }
  }

  // IntakeAir is created by the stock air intake module (duh), the parts usually have a small capacity for it (0.5 > 5.0 units)
  // so we use it as a (not very reliable, but whatever) modifier to know when those parts are present, and scale it by the static pressure
  // TODO : Add something in the description of all parts that have an air intake module
  PROCESS
  {
    name = airScrubbingPump
    title = #KERBALISM_Process_AirScrubbingPump_title
    desc = #KERBALISM_Process_AirScrubbingPump_desc
    modifier = if(EnvInOxygenAtmosphere, 1.0, 0.0) * if(ResHandler.GetResource("IntakeAir").Capacity > 0.0, 1.0, 0.0) * EnvStaticPressure
    INPUT
    {
      name = KsmWasteAtmosphere
      rate = 1.0 // TODO : balance this
    }
  }

  PROCESS
  {
    name = airPressurePump
    title = #KERBALISM_Process_AirPump_title
    desc = #KERBALISM_Process_AirPump_desc
    modifier = if(EnvInOxygenAtmosphere, 1.0, 0.0) * if(ResHandler.GetResource("IntakeAir").Capacity > 0.0, 1.0, 0.0) * EnvStaticPressure
    OUTPUT
    {
      name = KsmAtmosphere
      rate = 1.0 // TODO : balance this
    }
    OUTPUT
    {
      name = Oxygen
      rate = 1.0 // TODO : balance this
    }
  }

// ============================================================================
// Processes used in ProcessControllers
// ============================================================================

  // convention: 1 capacity = enough to scrub output of 1 crew member for 1 day
  PROCESS
  {
    name = nonRegenerativeScrubber
    title = #KERBALISM_NonRegenScrubber_title
    desc = #KERBALISM_NonRegenScrubber_desc
    useCapacityResource = true
    modifier = ResHandler.GetResource("nonRegenerativeScrubberCapacity").Amount * ResHandler.GetResource("nonRegenerativeScrubberProcess").Level

    INPUT
    {
      name = KsmWasteAtmosphere
      rate = 0.0024915995    // efficiency starts at 2x, reaches 1 in 6h, then drops below
    }
    INPUT
    {
      name = nonRegenerativeScrubberCapacity
      rate = 0.00003472222222 // consume 0.5 capacity in 4h, simulates the scrubber wearing out over time.
    }
  }

  // convention: 1 capacity = enough to scrub output of 1 crew member
  // 1 kerbal output 0.00124579975 WasteAtmosphere/s, rounded to 0.0014 to account for individuality and floating point rounding
  PROCESS
  {
    name = scrubber
    title = #KERBALISM_Scrubber_title
    desc = #KERBALISM_Scrubber_desc
    // defaults to modifier = ResHandler.GetResource($resourceName).Amount
    INPUT
    {
      name = ElectricCharge
      rate = 0.025
    }
    INPUT
    {
      name = KsmWasteAtmosphere
      rate = 0.0014
    }
    OUTPUT
    {
      name = CarbonDioxide
      rate = 0.0014
      dumpByDefault = true
    }
  }

  // convention: 1 capacity = enough to compensate for leaks in 70 mÂ² surface area (a cube of 40 mÂ³ volume, edge length of 3.42 m) per crew member
  // = 0.00025624796502 N2 to replace the Atmosphere leaked via the atmo leaks process for the above approx needed surface area per crew member
  PROCESS
  {
    name = pressureControl
    title = #KERBALISM_PressureControl_title
    desc = #KERBALISM_PressureControl_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.00858
    }
    INPUT
    {
      name = Nitrogen
      rate = 0.35  // Much higher than amount needed for leak control to allow speedier pressurization of low pressure habs and inflatables
    }
    OUTPUT
    {
      name = KsmAtmosphere
      rate = 0.35
      canDump = false
    }
  }

  // convention: 1 capacity = enough to recycle output of 1 crew member
  PROCESS
  {
    // ISS currently achieves 75% Water recovery from urine, although its
    // design target was 85% (quality of urine is issue), we use the design
    // target to be gentle on our users.

    // Based on https://en.wikipedia.org/wiki/Urine
    // 0.5% mass of urine is ammonia, we recover 90% of that
    // 0.5% mass of urine is of CarbonDioxide, we recover 90% of that

    name = waterRecycler
    title = #KERBALISM_WaterRecycler_title
    desc = #KERBALISM_WaterRecycler_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.0446
    }
    INPUT
    {
      name = WasteWater
      rate = 0.00000619
    }
    OUTPUT
    { // 75% of the mass
      name = Water
      rate = 0.0000046657125
    }
    OUTPUT
    {
      name = Ammonia
      rate = 0.00003640347854
      dumpByDefault = true
    }
    OUTPUT
    {
      name = CarbonDioxide
      rate = 0.00001434868016
      dumpByDefault = true
    }
  }

  // convention: 1 capacity = enough to process output of 1 crew member
  PROCESS
  {
    // Reclaim ~85% of all mass in the form of substrate and ammonia, mostly substrate.
    // Feces is considered to the dominant source of Waste.
    name = wasteProcessor
    title = #KERBALISM_WasteProcessor_title
    desc = #KERBALISM_WasteProcessor_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.065556
    }
    INPUT
    {
      name = Waste
      rate = 0.0000045527
    }
    OUTPUT
    {
      name = Ammonia
      rate = 0.000025
    }
    OUTPUT
    {
      name = Substrate
      rate = 0.00000115
    }
  }

  // convention: 1 capacity = enough to compress output of 1 crew member
  PROCESS
  {
    name = wasteCompressor
    title = #KERBALISM_WasteCompressor_title
    desc = #KERBALISM_WasteCompressor_desc
    INPUT
    {
      name = ElectricCharge
      rate = 1.2
    }
    INPUT
    {
      name = Waste
      rate = 0.0000045525
    }
    OUTPUT
    {
      name = Shielding
      rate = 0.00000001602982
    }
  }

  PROCESS
  {
    name = electricGenerator
    title = #KERBALISM_ElectricGenerator_title
    desc = #KERBALISM_ElectricGenerator_desc
    OUTPUT
    {
      name = ElectricCharge
      rate = 1.0
    }
  }

  PROCESS
  {
    name = radioisotopeGenerator
    title = #KERBALISM_RTG_title
    desc = #KERBALISM_RTG_desc
    useCapacityResource = true
    capacityResourceName = rtgProcessCapacity
    modifier = ResHandler.GetResource("radioisotopeGeneratorProcess").Amount * ResHandler.GetResource("rtgProcessCapacity").Level
    
    INPUT
    {
      name = rtgProcessCapacity
      rate = 0.000000001888 // 28.8 kerbin-year half-life
    }
    OUTPUT
    {
      name = ElectricCharge
      rate = 1.0
    }
    canToggle = false
  }
  
  VIRTUAL_RESOURCE
  {
    name = rtgProcessCapacity
    type = PartResource
    title = RTG fuel
    isVisible = true
  }

  PROCESS
  {
    name = H2O2FuelCell
    title = #KERBALISM_H2O2FuelCell_title
    desc = #KERBALISM_H2O2FuelCell_desc
    INPUT
    {
      name = Hydrogen
      rate = 1.0011122892
    }
    INPUT
    {
      name = Oxygen
      rate = 0.5065967413
    }
    OUTPUT
    {
      name = Water
      rate = 0.0008043014
      dumpByDefault = true
    }
    OUTPUT
    {
      name = ElectricCharge
      rate = 2.4026694940  // calculated from H2 @3.75ml/s gives 9W = 2400W/Liter. Referenced from page 14 of https://peer.asee.org/performance-of-a-pem-fuel-cell-system.pdf
    }
  }

  PROCESS
  {
    name = MPO2FuelCell
    title = #KERBALISM_MonopropO2FuelCell_title
    desc = #KERBALISM_MonopropO2FuelCell_desc
    INPUT
    {
      name = Oxygen
      rate = 0.510619148925
    }
    INPUT
    {
      name = MonoPropellant
      rate = 0.000901270123875 // (Hydrazine@0.000718143525)
    }
    OUTPUT
    {
      name = Nitrogen
      rate = 0.5038381295
      dumpByDefault = true
    }
    OUTPUT
    {
      name = Water
      rate = 0.0008106876
      dumpByDefault = true
    }
    OUTPUT
    {
      name = ElectricCharge
      rate = 0.1
    }
  }

  PROCESS
  {
    name = waterElectrolysis
    title = #KERBALISM_WaterElectrolysis_title
    desc = #KERBALISM_WaterElectrolysis_desc
    INPUT
    {
      name = ElectricCharge
      rate = 2.4026694940
    }
    INPUT
    {
      name = Water
      rate = 0.0008043014
    }
    OUTPUT
    {
      name = Hydrogen
      rate = 1.0011122892
    }
    OUTPUT
    {
      name = Oxygen
      rate = 0.5065967413
    }
  }

  PROCESS
  {
    name = wasteIncinerator
    title = #KERBALISM_WasteIncinerator_title
    desc = #KERBALISM_WasteIncinerator_desc
    INPUT
    {
      name = Waste
      rate = 0.0001082667 // H18C82
    }
    INPUT
    {
      name = Oxygen
      rate = 0.1589194249
    }
    OUTPUT
    {
      name = CarbonDioxide
      rate = 0.1497439605
    }
    OUTPUT
    {
      name = Water
      rate = 0.0000131259
    }
    OUTPUT
    {
      name = ElectricCharge
      rate = 0.005
    }
  }

  PROCESS
  {
    name = sabatierProcess   // LiquidFuel output balanced to match Anthraquinone Oxidizer output
    title = #KERBALISM_SabatierProcess_title
    desc = #KERBALISM_SabatierProcess_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.008082126 // calculated using 3.256 J/(g K) (sustained heating to 575K)
    }
    INPUT
    {
      name = CarbonDioxide
      rate = 3.490273221
    }
    INPUT
    {
      name = Hydrogen
      rate = 13.87826691
    }
    OUTPUT
    {
      name = Water
      rate = 0.005574954
    }
    OUTPUT
    {
      name = LiquidFuel
      rate = 0.000496445    // (Methane@3.46196019) Note that LiquidFuel has a density of 5Kg/Unit
      dumpByDefault = true
    }
  }

  PROCESS
  {
    name = haberProcess
    title = #KERBALISM_HaberProcess_title
    desc = #KERBALISM_HaberProcess_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.00594773  // calculated using 2.9367 J/(g K) (sustained heating to 700K)
    }
    INPUT
    {
      name = Nitrogen
      rate = 1.3315033550
    }
    INPUT
    {
      name = Hydrogen
      rate = 4.0
    }
    OUTPUT
    {
      name = Ammonia
      rate = 2.6336940144
    }
  }

  PROCESS
  {
    name = anthraquinoneProcess   // Oxidizer output balanced to match Sabatier LiquidFuel output
    title = #KERBALISM_AnthraquinoneProcess_title
    desc = #KERBALISM_AnthraquinoneProcess_desc
    INPUT
    {
      name = Hydrogen
      rate = 2.0
    }
    INPUT
    {
      name = Oxygen
      rate = 2.0241355411
    }
    OUTPUT
    {
      name = Oxidizer
      rate = 0.0006067662   // (HydrogenPeroxide@0.0020922973) Note that Oxidizer has a density of 5Kg/Unit
    }
  }

  PROCESS
  {
    name = hydrazineProduction   // Peroxide process
    title = #KERBALISM_HydrazineProduction_title
    desc = #KERBALISM_HydrazineProduction_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.023871584  // calculated using 6.99 J/(g K) (sustained heating to 460K)
    }
    INPUT
    {
      name = Ammonia
      rate = 4.7203389609
    }
    INPUT
    {
      name = Oxidizer
      rate = 0.0014500000   // (HydrogenPeroxide@0.0050000000) Note that Oxidizer has a density of 5Kg/Unit
    }
    OUTPUT
    {
      name = Water
      rate = 0.0057597534
    }
    OUTPUT
    {
      name = Oxygen
      rate = 1.2092781475
    }
    OUTPUT
    {
      name = MonoPropellant
      rate = 0.0008537763   // (Hydrazine@0.0034014990) Note that MonoPropellant has a density of 4Kg/Unit
    }
  }

  PROCESS
  {
    name = hydrazineProductionN2   // NitroPeroxide process
    title = #KERBALISM_HydrazineProductionN2_title
    desc = #KERBALISM_HydrazineProductionN2_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.059678961  // calculated using 6.99 J/(g K) (sustained heating to 460K)
    }
    INPUT
    {
      name = Ammonia
      rate = 4.7203389609
    }
    INPUT
    {
      name = Oxidizer
      rate = 0.0014500000   // (HydrogenPeroxide@0.0050000000) Note that Oxidizer has a density of 5Kg/Unit
    }
    INPUT
    {
      name = Nitrogen
      rate = 3.5796568216
    }
    OUTPUT
    {
      name = Oxygen
      rate = 4.8371125902
    }
    OUTPUT
    {
      name = MonoPropellant
      rate = 0.0021344406   // (Hydrazine@0.0085037476) Note that MonoPropellant has a density of 4Kg/Unit
    }
  }

  PROCESS
  {
    name = solidOxideElectrolysis
    title = #KERBALISM_SolidOxideElectrolysis_title
    desc = #KERBALISM_SolidOxideElectrolysis_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.010835259   // calculated using 10.1749 J/(g K)  (sustained heating to 1125K)
    }
    INPUT
    {
      name = CarbonDioxide // density = 0.000001951
      rate = 2.0
    }

    OUTPUT
    {
      name = Oxygen // density = 0.00000141
      rate = 2.0121270980
    }
    OUTPUT // turns waste carbon into shielding
    {
      name = KsmShielding // density = 0.075
      rate = 0.00001419867722
      dumpByDefault = true
    }
  }

  PROCESS
  {
    name = moltenRegolithElectrolysis
    title = #KERBALISM_MoltenRegolithElectrolysis_title
    desc = #KERBALISM_MoltenRegolithElectrolysis_desc
    INPUT
    {
      name = ElectricCharge
      rate = 2.0 // 2 kW MRE reactor at 2300 K with heat corrosion resistant crucible
    }
    INPUT
    {
      name = Ore
      rate = 0.00006342
    }
    OUTPUT
    {
      name = Oxygen
      rate = 0.088843           // 42% of regolith is O2
    }
    OUTPUT
    {
      name = CarbonDioxide
      rate = 0.00444215  // approx 2% of regolith is CO2, released in the pre-heating stage @950K
      dumpByDefault = true
    }
    OUTPUT
    {
      name = KsmShielding
      rate = 0.000000112     // makes Shielding out of waste Slag
      dumpByDefault = true
    }
  }

  PROCESS
  {
    name = selectiveCatalyticOxidation
    title = #KERBALISM_SelectiveCatalyticOxidation_title
    desc = #KERBALISM_SelectiveCatalyticOxidation_desc
    INPUT
    {
      name = ElectricCharge
      rate = 0.007166717  // calculated using 2.9367 J/(g K) (sustained heating to 700K)
    }
    INPUT
    {
      name = Ammonia
      rate = 2.0
    }
    INPUT
    {
      name = Oxygen
      rate = 1.5371075987
    }
    OUTPUT
    {
      name = Nitrogen
      rate = 1.0111298789
    }
    OUTPUT
    {
      name = Water
      rate = 0.0024403982
    }
  }
}
